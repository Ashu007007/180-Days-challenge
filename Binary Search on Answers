Square root if a number (log(n)):

https://www.codingninjas.com/studio/problems/square-root-integral_893351

Solution:
int floorSqrt(int n)
{
    int low=1,high=n;
    int ans=1;
    while(low<=high)
    {
        //To avoid overflow
        long long mid = low+(high-low)/2;
        
        if(mid*mid == n)
        {
            return mid;
        }
        if(mid*mid<=n)
        {
            ans=mid;
            low=mid+1;
        }
        else
        {
            high=mid-1;
        }
    }
    return high;
}
=============================================================================================================================
Find Nth root of M:

https://www.codingninjas.com/studio/problems/nth-root-of-m_1062679

Solution:
#include <bits/stdc++.h>
// if ans>m return 2
// if ans==m return 1
// if ans<m return 0
int func(int mid,int n,int m) // this function will take care of overflow
{
  long long ans=1; // taking long long data typer for ans is essential is at some point for once it will overflow int capacity 
  for(int i=1;i<=n;i++)
  {
    ans=ans*mid;
    if(ans>m) return 2; // if it exceeds limit then ultimate return
  }
  if(ans==m) return 1;
  return 0; // under limit
}
int NthRoot(int n, int m) {
  int low=1;
  int high=m;
  while(low<=high)
  {
    int mid=low+(high-low)/2;
    int temp=func(mid,n,m);
    if(temp == 1)
    {
      return mid;
    }
    else if(temp == 2)
    {
      high=mid-1;
    }
    else
    {
      low=mid+1;
    }
  }
  return -1;
}
============================================================================================================================
Koko eating Banana:

https://www.codingninjas.com/studio/problems/minimum-rate-to-eat-bananas_7449064

Solution:

#include<bits/stdc++.h>
int findMax(vector<int> v){
    int ans = v[0];
    for(int i=0;i<v.size();i++){
        ans = max(ans,v[i]);
    }
    return ans;
}
int calToH(vector<int> v,int hour, int givenH){
    int ans=0;
    for(auto i:v){
        // to avoid adding more like if 5/3 
        //then it must be 2 not 3 so this will check and 
        //convert to 1 if i%hour is not equals to 0
        ans += i/hour + (i%hour !=0);
        if(ans > givenH){
            break;
        }
    }
    return ans;
}
int minimumRateToEatBananas(vector<int> v, int h) {
    // since it must eat something not 0
    int l=1;
    // finding maximum since it can be the highest it can eat anytime
    int r = findMax(v);
    while(l<=r){
        int mid = (l+r)/2;
        // calculating total hours
        int totHrs = calToH(v,mid,h);
        if(totHrs<=h){
            r = mid-1;
        }else{
            l=mid+1;
        }
    }
    return l;
}
==========================================================================================================================
Kth missing Positive number:

https://www.codingninjas.com/studio/problems/kth-missing-element_893215

Solution:
int missingK(vector < int > vec, int n, int k) {
    int i=0,j=n-1;
    while(i<=j)
    {
        int mid=i+(j-i)/2;
        int missing=vec[mid]-mid-1;
        if(missing<k)
        i=mid+1;
        else 
        j=mid-1;
    }
    return i+k;
}
===========================================================================================================================
Aggrisive Cows:

https://www.codingninjas.com/studio/problems/aggressive-cows_1082559

Solution:
 bool distance(vector<int> &stalls,int mid, int k){

    int cowcount=1;

    int position=stalls[0];

    for(int i=0;i<stalls.size();i++){

        if(stalls[i]-position>=mid){

            cowcount++;

            position=stalls[i];

            if(cowcount>=k)return true;

        }

    }

    return false;

}

 

int aggressiveCows(vector<int> &stalls, int k)

{

    sort(stalls.begin(),stalls.end());

    int s= 0;

    int ans=-1;

    int max= *max_element(stalls.begin(),stalls.end());

    int min= *min_element(stalls.begin(),stalls.end());

    int e=max-min;

    while(s<=e){

        int mid=s+(e-s)/2;

        if(distance(stalls,mid,k)==true){

            ans= mid;

            s=mid+1;

        }else{

            e=mid-1;

        }

    }

    return ans;

}
===========================================================================================================================
 Minimize Max Distance to Gas Station:

https://www.codingninjas.com/studio/problems/minimise-max-distance_7541449

Solution:
int numberOfGasStationsRequired(long double dist, vector<int> &arr) {
    int n = arr.size(); // size of the array
    int cnt = 0;
    for (int i = 1; i < n; i++) {
        int numberInBetween = ((arr[i] - arr[i - 1]) / dist);
        if ((arr[i] - arr[i - 1]) == (dist * numberInBetween)) {
            numberInBetween--;
        }
        cnt += numberInBetween;
    }
    return cnt;
}

double minimiseMaxDistance(vector<int> &arr, int k) {
    int n = arr.size(); // size of the array
    long double low = 0;
    long double high = 0;

    //Find the maximum distance:
    for (int i = 0; i < n - 1; i++) {
        high = max(high, (long double)(arr[i + 1] - arr[i]));
    }

    //Apply Binary search:
    long double diff = 1e-6 ;
    while (high - low > diff) {
        long double mid = (low + high) / (2.0);
        int cnt = numberOfGasStationsRequired(mid, arr);
        if (cnt > k) {
            low = mid;
        }
        else {
            high = mid;
        }
    }
    return (double)high;
}
