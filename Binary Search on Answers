Square root if a number (log(n)):

https://www.codingninjas.com/studio/problems/square-root-integral_893351

Solution:
int floorSqrt(int n)
{
    int low=1,high=n;
    int ans=1;
    while(low<=high)
    {
        //To avoid overflow
        long long mid = low+(high-low)/2;
        
        if(mid*mid == n)
        {
            return mid;
        }
        if(mid*mid<=n)
        {
            ans=mid;
            low=mid+1;
        }
        else
        {
            high=mid-1;
        }
    }
    return high;
}
=============================================================================================================================
Find Nth root of M:

https://www.codingninjas.com/studio/problems/nth-root-of-m_1062679

Solution:
#include <bits/stdc++.h>
// if ans>m return 2
// if ans==m return 1
// if ans<m return 0
int func(int mid,int n,int m) // this function will take care of overflow
{
  long long ans=1; // taking long long data typer for ans is essential is at some point for once it will overflow int capacity 
  for(int i=1;i<=n;i++)
  {
    ans=ans*mid;
    if(ans>m) return 2; // if it exceeds limit then ultimate return
  }
  if(ans==m) return 1;
  return 0; // under limit
}
int NthRoot(int n, int m) {
  int low=1;
  int high=m;
  while(low<=high)
  {
    int mid=low+(high-low)/2;
    int temp=func(mid,n,m);
    if(temp == 1)
    {
      return mid;
    }
    else if(temp == 2)
    {
      high=mid-1;
    }
    else
    {
      low=mid+1;
    }
  }
  return -1;
}
============================================================================================================================
Koko eating Banana:

https://www.codingninjas.com/studio/problems/minimum-rate-to-eat-bananas_7449064

Solution:


#include<bits/stdc++.h>

int findMax(vector<int> v){

    int ans = v[0];

    for(int i=0;i<v.size();i++){

        ans = max(ans,v[i]);

    }

    return ans;

}

int calToH(vector<int> v,int hour, int givenH){

    int ans=0;

    for(auto i:v){

        // to avoid adding more like if 5/3 

        //then it must be 2 not 3 so this will check and 

        //convert to 1 if i%hour is not equals to 0

        ans += i/hour + (i%hour !=0);

        if(ans > givenH){

            break;

        }

    }

    return ans;

}

int minimumRateToEatBananas(vector<int> v, int h) {

    // since it must eat something not 0

    int l=1;

    // finding maximum since it can be the highest it can eat anytime

    int r = findMax(v);

    while(l<=r){

        int mid = (l+r)/2;

        // calculating total hours

        int totHrs = calToH(v,mid,h);

        if(totHrs<=h){

            r = mid-1;

        }else{

            l=mid+1;

        }

    }

    return l;

}
 
