Zero Matrix:

https://www.codingninjas.com/studio/problems/zero-matrix_1171153

Solution:

#include <bits/stdc++.h> 
vector<vector<int>> zeroMatrix(vector<vector<int>> &matrix, int n, int m) {
	int row[n]={0};
	int col[m]={0};
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(matrix[i][j]==0){
				row[i]=1;
				col[j]=1;
			}
		}
	}

	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(row[i]||col[j]){
				matrix[i][j]=0;
			}
		}
	}
return matrix;
}

==========================================================================================================================================================================

Rotate the matrix:

https://www.codingninjas.com/studio/problems/rotate-the-matrix_6825090

Solution:

#include<vector>
void rotateMatrix(vector<vector<int>> &mat){
    int n = mat.size();
    // transposing the matrix
    for(int i=0; i<n; i++){
        for(int j=i+1; j<n; j++){
            int temp = mat[i][j];
            mat[i][j] = mat[j][i];
            mat[j][i] = temp;
        }
    }
    // reversing the rows in matrix;
    int i=0;
    while(i<n){
        int k=0, l=n-1;
        while(k<=l){
            int temp = mat[i][k];
            mat[i][k] = mat[i][l];
            mat[i][l] = temp;
            k++;
            l--;
        }
        i++;
    }
}
============================================================================================================================================================================

Count all subarrays with given sum:

https://www.codingninjas.com/studio/problems/subarray-sums-i_1467103

Solution:
int findAllSubarraysWithGivenSum(vector < int > & arr, int k) {
    // Write Your Code Here

    unordered_map<int,int> mpp;

    int count=0,rem=0,presum=0;

    mpp[0]=1;

    for(int i=0;i<arr.size();i++){

        presum=presum+arr[i];

        int rem=presum-k;

        count=count+mpp[rem];

        mpp[presum]++;

    }

    return count;
}

==========================================================================================================================

Spiral Matrix 

https://www.codingninjas.com/studio/problems/spiral-matrix_6922069

Solution:

vector<int> spiralMatrix(vector<vector<int>>&MATRIX) {
    int n=MATRIX.size();
    int m=MATRIX[0].size();
    int left=0,right=m-1,bottom=n-1,top=0;
    vector<int> ans;
    while(top<=bottom && left<=right){
        for(int i=left;i<=right;i++){
            ans.push_back(MATRIX[top][i]);
        }
        top++;
        for(int i=top;i<=bottom;i++){
            ans.push_back(MATRIX[i][right]);
        }
        right--;
        if(top<=bottom){
            for(int i=right;i>=left;i--){
                ans.push_back(MATRIX[bottom][i]);
            }
            bottom--;
        }
        if(left<=right){
            for(int i=bottom;i>=top;i--){
                ans.push_back(MATRIX[i][left]);
            }
            left++;
        }
    }
    return  ans;
}
==========================================================================================================================
Search in a 2D matrix:

https://www.codingninjas.com/studio/problems/search-in-a-2d-matrix_980531

Solution:
bool searchMatrix(vector<vector<int>>& mat, int target) {

          for(int i=0;i<mat.size();i++){

          for(int j=0;j<mat[0].size();j++){

              if(mat[i][j]==target){

                  return true;

              }

          }

          }

          return false;

}
==========================================================================================================================
Find Peak Element (2D):

https://www.codingninjas.com/studio/problems/find-peak-element_7449073

Solution:
vector<int> findPeakGrid(vector<vector<int>> &g){

    // Write your code here.    

    int n = g.size();

    int m = g[0].size();

    int ans1 = -1 , ans2 = -1;

    int max = g[0][0];

 

    for(int i=0; i<n; i++)

    {

        int low = 0, high = m-1;

        while(low <= high)

        {

            int mid = (low + high) / 2;

            if(g[i][mid] >= max)

            {

                max = g[i][mid];

                ans1 = i;

                ans2 = mid;

                low = mid + 1;

            }

            else

            {

                high = mid - 1;

            }

            

        }

    }

 

    return {ans1, ans2};

}
===========================================================================================================================
Median in a row-wise sorted Matrix:

https://www.codingninjas.com/studio/problems/median-of-a-row-wise-sorted-matrix_1115473

Solution:
int upperBound(vector<int> &arr, int x, int n){

    // Write your code here.

        int low=0;

    int high=n-1;

    int ans=0;

    while(low<=high){

      int mid=low+(high-low)/2;

      if(arr[mid]<=x){

          ans=mid+1;

          low=mid+1;

          } 

          else {

                  high = mid-1;

          }

        }

    return ans; 

}

 

int median(vector<vector<int>> &A, int m, int n) {

    int low = 1;

  int high = 1e9;

  //int n = A.size();

  //int m = A[0].size();

  while (low <= high)

  {

    int mid = (low + high) >> 1;

    int cnt = 0;

    for (int i = 0; i < m; i++)

    {

      cnt += upperBound(A[i], mid,n);

    }

    if (cnt <= (n * m) / 2)

      low = mid + 1;

    else

      high = mid - 1;

  }

  return low;

 

}
