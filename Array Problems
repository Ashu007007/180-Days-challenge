Check Sorted Array:

https://www.codingninjas.com/studio/problems/ninja-and-the-sorted-check_6581957

Solution:

int isSorted(int n, vector<int> a){
  for(int i=0;i<n-1;i++){
    if(a[i]>a[i+1]){
      return 0;
    }
  }
  return 1;
}

============================================================================================================================================================================
Largest Element in the array:

https://www.codingninjas.com/studio/problems/largest-element-in-the-array-largest-element-in-the-array_5026279

Solution:

#include <bits/stdc++.h> 
int largestElement(vector<int> &arr, int n) {
   auto it = max_element(arr.begin(), arr.end());
    return *it;
}

=============================================================================================================================
Second Largest Number:

https://www.codingninjas.com/studio/problems/ninja-and-the-second-order-elements_6581960

Solution:

int slargest(int n, vector<int> a){
int l = a[0];
int sl = -1;
for(int i = 1;i<n;i++){
    if(a[i]>l){
        sl = l;
        l = a[i];
    }else if (a[i]<l && a[i]>sl){
        sl = a[i];
    }
}
return sl;
}


int ssmallest(int n, vector<int> a){
int s = a[0];
int ss = INT_MAX;
for(int i=1;i<n;i++){
    if(a[i]<s){
        ss = s;
        s = a[i];
    }else if (a[i]!=s && ss>a[i]){
        ss = a[i];
    }
}
return ss;
}
vector<int> getSecondOrderElements(int n, vector<int> a) {
   int large = slargest(n, a);
   int small = ssmallest(n, a);
   return {large,small};
}

===========================================================================================================================
Remove Duplicates from Sorted Array:

https://www.codingninjas.com/studio/problems/remove-duplicates-from-sorted-array_1102307

int removeDuplicates(vector<int> &arr, int n) {
int i = 0;
for(int j =1;j<n;j++){
	if(arr[i]!=arr[j]){
		arr[i+1]=arr[j];
		i++;
	}
}
return i+1;
}
===========================================================================================================================
Left rotate and array by one position:

https://www.codingninjas.com/studio/problems/left-rotate-an-array-by-one_5026278

#include <bits/stdc++.h> 
vector<int> rotateArray(vector<int>& arr, int n) {
   int temp = arr[0];
   for(int i =1;i<n;i++){
       arr[i-1]=arr[i];
       
   }
   arr[n-1] = temp;
   return arr;
}
===========================================================================================================================

Rotate an array by K position:

https://www.codingninjas.com/studio/problems/rotate-array_1230543

Solution:

vector<int> rotateArray(vector <int> &arr, int k){
int n = arr.size();
vector <int> temp(n);
for(int i=0;i<n;i++){
temp[i] = arr[(i+k)%n];
}
return temp;
}

===========================================================================================================================
Move Zero's to the end:

https://www.codingninjas.com/studio/problems/ninja-and-the-zero-s_6581958

Solution:

vector<int> moveZeros(int n, vector<int> a) {
   
 int j = -1;
 for(int i=0;i<n;i++){
    if(a[i]==0){
       j = i;
       break;
    }
 }
 if(j == -1) return a;
 for(int i = j+1;i<n;i++){
    if(a[i]!=0){
       swap(a[i],a[j]);
       j++;
    }
 }
 return a;
}

===========================================================================================================================
