Check Sorted Array:

https://www.codingninjas.com/studio/problems/ninja-and-the-sorted-check_6581957

Solution:

int isSorted(int n, vector<int> a){
  for(int i=0;i<n-1;i++){
    if(a[i]>a[i+1]){
      return 0;
    }
  }
  return 1;
}

============================================================================================================================================================================
Largest Element in the array:

https://www.codingninjas.com/studio/problems/largest-element-in-the-array-largest-element-in-the-array_5026279

Solution:

#include <bits/stdc++.h> 
int largestElement(vector<int> &arr, int n) {
   auto it = max_element(arr.begin(), arr.end());
    return *it;
}

=============================================================================================================================
Second Largest Number:

https://www.codingninjas.com/studio/problems/ninja-and-the-second-order-elements_6581960

Solution:

int slargest(int n, vector<int> a){
int l = a[0];
int sl = -1;
for(int i = 1;i<n;i++){
    if(a[i]>l){
        sl = l;
        l = a[i];
    }else if (a[i]<l && a[i]>sl){
        sl = a[i];
    }
}
return sl;
}


int ssmallest(int n, vector<int> a){
int s = a[0];
int ss = INT_MAX;
for(int i=1;i<n;i++){
    if(a[i]<s){
        ss = s;
        s = a[i];
    }else if (a[i]!=s && ss>a[i]){
        ss = a[i];
    }
}
return ss;
}
vector<int> getSecondOrderElements(int n, vector<int> a) {
   int large = slargest(n, a);
   int small = ssmallest(n, a);
   return {large,small};
}

===========================================================================================================================
Remove Duplicates from Sorted Array:

https://www.codingninjas.com/studio/problems/remove-duplicates-from-sorted-array_1102307

int removeDuplicates(vector<int> &arr, int n) {
int i = 0;
for(int j =1;j<n;j++){
	if(arr[i]!=arr[j]){
		arr[i+1]=arr[j];
		i++;
	}
}
return i+1;
}
===========================================================================================================================
Left rotate and array by one position:

https://www.codingninjas.com/studio/problems/left-rotate-an-array-by-one_5026278

#include <bits/stdc++.h> 
vector<int> rotateArray(vector<int>& arr, int n) {
   int temp = arr[0];
   for(int i =1;i<n;i++){
       arr[i-1]=arr[i];
       
   }
   arr[n-1] = temp;
   return arr;
}
===========================================================================================================================

Rotate an array by K position:

https://www.codingninjas.com/studio/problems/rotate-array_1230543

Solution:

vector<int> rotateArray(vector <int> &arr, int k){
int n = arr.size();
vector <int> temp(n);
for(int i=0;i<n;i++){
temp[i] = arr[(i+k)%n];
}
return temp;
}

===========================================================================================================================
Move Zero's to the end:

https://www.codingninjas.com/studio/problems/ninja-and-the-zero-s_6581958

Solution:

vector<int> moveZeros(int n, vector<int> a) {
   
 int j = -1;
 for(int i=0;i<n;i++){
    if(a[i]==0){
       j = i;
       break;
    }
 }
 if(j == -1) return a;
 for(int i = j+1;i<n;i++){
    if(a[i]!=0){
       swap(a[i],a[j]);
       j++;
    }
 }
 return a;
}

===========================================================================================================================
Liner Serach:

https://www.codingninjas.com/studio/problems/linear-search_6922070

Solution:

int linearSearch(int n, int num, vector<int> &arr)
{
    for(int i=0;i<n;i++){
        if(arr[i]==num){
            return i;
        }
    }
     return -1;
}
===============================================================================================================================
Merge two sorted arrays/union of two arrays:

https://www.codingninjas.com/studio/problems/sorted-array_6613259

Solution:

#include<bits/stdc++.h>
vector < int > sortedArray(vector < int > a, vector < int > b) {
    set<int> st;
    int n = a.size();
    int m = b.size();
    
    for(int i=0;i<n;i++){
        st.insert(a[i]);
    }

    for(int j=0;j<m;j++){
        st.insert(b[j]);
    }
    vector<int> temp;
    for(auto it :st){
        temp.push_back(it);
    }
    return temp;
}

========================================================
Better solution:
========================================================
#include<bits/stdc++.h>
vector < int > sortedArray(vector < int > a, vector < int > b) {
    set<int> st;
    int n = a.size();
    int m = b.size();
    int i = 0;
    int j = 0;
   vector <int> temp;
   while(i<n && j<m){
       if(a[i]<=b[j]){
           if(temp.size() == 0 || temp.back()!=a[i]){
               temp.push_back(a[i]);
               
           }
           i++;
       }

       if(b[j]<=a[i]){
           if (temp.size() == 0 || temp.back() != b[j]) {
               temp.push_back(b[j]);
           }
           j++;
       }
   }

       while(i<n){
           if(temp.size() == 0 || temp.back()!=a[i]){
               temp.push_back(a[i]);
               
           }
           i++;
       }

       while(j<m){
           if(temp.size() == 0 || temp.back()!= b[j]){
               temp.push_back(b[j]);
           }
           j++;
       }
       return temp;
   }
=============================================================================================================================
Find the single element:

https://www.codingninjas.com/studio/problems/find-the-single-element_6680465

Solution:

BRUTE FORCE 

#include<vector>

 

int getSingleElement(vector<int> &arr){
// Write your code here.
int n =arr.size();
for(int i=0;i<n;i++){
	int num=arr[i];
	int count=0;
		for(int j=0;j<n;j++){
			if(arr[j]==num){
			count++;
			}
		}
	if (count == 1) {
	return num;
	}
}
return 0;
}

***********************************************************USING HASHMAP********************************************************
#include<vector>
int getSingleElement(vector<int> &arr){
// Write your code here.
unordered_map<long, int> countMap;
// Count occurrences using unordered_map
for (int i = 0; i < arr.size(); i++) {
countMap[arr[i]]++;
}
// Find the first element with count equal to 1
for (int i = 0; i < arr.size(); i++) {
if (countMap[arr[i]] == 1) {
return arr[i];
}
}

// Return a default or special value if no such element is found
return -1;
}

*************************************************************BIT MANIPULATION:*************************************************

#include<vector>
int getSingleElement(vector<int> &arr){

// Write your code here.

int XOR1=0;

for(int i=0;i<arr.size();i++){

XOR1 = XOR1^arr[i];

}

return XOR1;

}
==========================================================================================================================
Maximum Consecutive Ones:

https://www.codingninjas.com/studio/problems/traffic_6682625:

Soltuion:

int traffic(int n, int m, vector<int> vehicle) {
    int i=0,j=0,ans=0,zeros=0;
    for(j=0;j<n;j++){
       if(vehicle[j]==0)
       zeros++;
       while(zeros>m){
           if(vehicle[i]==0)
             zeros--;
        i++;
       }
       ans=max(ans,j-i+1);
    }
    return ans;
}
============================================================================================================================
Longest subarry with sum k:

https://www.codingninjas.com/studio/problems/longest-subarray-with-sum-k_6682399

Solution:

#include<bits/stdc++.h>
int longestSubarrayWithSumK(vector<int> a, long long k) {
    int n = a.size();
    long long sum = a[0];
    int maxlen = 0;
    int i =0; int j=0;
    while(j<n){
        while(i<=j && sum>k){
            sum = sum-a[i];
            i++;
        }
        if(sum==k){
            maxlen = max(maxlen,j-i+1);
        }
        j++;
        if(j<n){
            sum = sum+a[j];
        }

    }
    return maxlen;
}


=================================================================================================================
Longest Subarray With Sum K.

https://www.codingninjas.com/studio/problems/longest-subarray-with-sum-k_5713505

Solution:

#include <bits/stdc++.h> 
int getLongestSubarray(vector<int>& nums, int k){
    map<int, int> mpp;
    int sum = 0;
    int maxlen = 0;
    for(int i=0;i<nums.size();i++){
        sum+=nums[i];
        
    if(sum==k){
        maxlen = max(maxlen, i+1);
    }        

    int rem = sum-k;
    if(mpp.find(rem)!=mpp.end()){
        int len = i-mpp[rem];
        maxlen = max(maxlen, len);
    }

    if(mpp.find(sum)==mpp.end()){
        mpp[sum] = i;
    }
    }
    return maxlen;
}

===========================================================================================================================
Superior Elements:

https://www.codingninjas.com/studio/problems/superior-elements_6783446

Solutions:

vector<int> superiorElements(vector<int> &a) { 
     int maxi=0;
    vector<int> x;
    for(int i=a.size()-1;i>=0;i--){
        if(a[i]>maxi){
            x.push_back(a[i]);
            maxi = max(a[i],maxi);
        }
    }
    return x;
=========================================================================================================================

Maximum Subarray sum:

https://www.codingninjas.com/studio/problems/maximum-subarray-sum_630526

Solution:

long long maxSubarraySum(vector<int> arr, int n)
{
    long long sum = 0;
    long long maxi = INT_MIN;
    for(int i=0;i<n;i++){
        sum+=arr[i];
        if(sum < 0){
            sum=0;
        } 
        maxi = max(maxi,sum);
    
    }
    return maxi;
}

==========================================================================================================================
