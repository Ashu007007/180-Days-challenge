Anagram Pair:

https://www.codingninjas.com/studio/problems/anagram-pairs_626517

Solution:
#include<bits/stdc++.h>
bool isAnagram(string str1, string str2)
{
    int len1 = str1.size();
    int len2 = str2.size();

    if(len1!=len2){
        return false;
    }

    unordered_map<char, int> mp1;
    unordered_map<char, int> mp2;
    for(int i=0;i<len1;i++){
        mp1[str1[i]]++;
    }

    
    for(int i=0;i<len2;i++){
        mp2[str2[i]]++;
    }

    if(mp1==mp2){
        return true;
    }else{
        return false;
    }
}

==========================================================================================================================================================================
Isomorphic Strings:

https://www.codingninjas.com/studio/problems/isomorphic-strings-_1117636

Solution:
bool areIsomorphic(string &str1, string &str2)

{


    if (str1.size() != str2.size()) return 0;

    int fr1[26] = {0,};

    int fr2[26] = {0,};

    for (int i=0; i<str1.size(); i++){

        int t = str2[i]-'a', tt = str1[i]-'a';

        if (fr1[t] == 0) fr1[t] = tt;

        else if (fr1[t] != tt)   return 0;

        if (fr2[tt] == 0) fr2[tt] = t;

        else if (fr2[tt] != t)   return 0;  

    }

    return 1;

}

============================================================================================================================
Maximum Nesting Depth Of The Parentheses:

https://www.codingninjas.com/studio/problems/maximum-nesting-depth-of-the-parentheses_8144741

Solution:
#include<bits/stdc++.h>
int maxDepth(string s) {
    // Write your code here.
    int count=0;
    int maxi=0;
    for(int i=0;i<s.length();i++){
          if(s.at(i)=='(')
            count++;
          else if(s.at(i)==')')
          count--; 
          maxi=max(maxi,count);   
    }
    return maxi;
}
============================================================================================================================
Reverse String:

https://www.codingninjas.com/studio/problems/reverse-words_7037425

Solution:
string revWords(string str) {
    int n=str.length();
    string res="";
    int i=0;
    while(i<n){
        while(i<n && str[i]==' '){
            i++;
        }
        if(i>=n)break;
        int j=i+1;
        while(j<n && str[j]!=' '){
            j++;
        }
        string sub=str.substr(i,j-i);
        if(res.length()==0){
            res=sub;
        }
        else{
            res=sub+" "+res;
        }
        i=j+1;
    }
    return res;
}
============================================================================================================================
SUm of beauty of all subset:

https://www.codingninjas.com/studio/problems/sum-of-beauty-of-all-substrings_8143656

Solution:
int sumOfBeauty(string s) {

int n=s.size();
int ans=0;

for(int i=0 ; i<n ; i++){
		
	unordered_map<char , int> mp;

	for(int j=i ; j<n ; j++){
		mp[s[j]]++;
		int mini=INT_MAX;
		int maxi=INT_MIN;
				
		for(auto it: mp){
			maxi=max(maxi , it.second);
			mini=min(mini , it.second);
		}
		ans+=(maxi-mini);
	}	
}
return ans;
}
===========================================================================================================================
Count With K Different Characters

https://www.codingninjas.com/studio/problems/count-with-k-different-characters_1214627

Solution:
int f(string &s,int k){
    int i=0,j=0,n=s.size(),d=0,ans=0;
    vector<int>v(26,0);
    while(j<n){
        int idx=s[j]-'a';
        v[idx]++;
        if(v[idx]==1){
            d++;
        }
        while(d>k){
            v[s[i]-'a']--;
            if(v[s[i]-'a']==0){
                d--;
            }
            i++;
        }
        ans+=j-i+1;
        j++;
    }
    return ans;
}
int countSubStrings(string str, int k) 
{
    return f(str,k)-f(str,k-1);
}
===========================================================================================================================
 Implement Atoi Function

https://www.codingninjas.com/studio/problems/implement-atoi-function_981270

Solution:
int createAtoi(string s) {
    int val =0;
    int i=0, len= s.length();
    bool positive= true;
    while(i<len){
        while(i<len && s[i]==' '){
            i++;
        }
        if(i<len && s[i]=='-'){
            positive=false;
            i++;
        }
        else if(i<len && s[i]=='+'){
            i++;
        }
        while(i<len && s[i]-'0'>=0 && s[i]-'0'<=9){
            
            if(!positive  ){
                if(-val<= INT_MIN/  10)
                return INT_MIN;
                else{
                    val = val * 10 + s[i]-'0'; 
                }
            }
            else{
                if(val >= INT_MAX/10){
                    return INT_MAX;
                }
                val = val* 10 + s[i]-'0';
            }
            i++;
        }
        break;
    }
    if(!positive) return -val;
    return val;
}
