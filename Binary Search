Binary Search:

https://www.codingninjas.com/studio/problems/binary-search_972

Solution:

int search(vector<int> &nums, int target) {
    int n = nums.size();
    int low = 0;
    int high = n-1;
    while(low<=high){
        int mid = (low+high)/2;
        if(nums[mid]==target){
            return mid;
        }
        else if(nums[mid]>target){
            high = mid-1;

        }
        else{
            low = mid+1;
        }
    }
    return -1;
}
============================================================================================================================
Find peak element:

https://www.codingninjas.com/studio/problems/find-peak-element_1081482


int findPeakElement(vector<int> &arr) {

    // Write your code here

     int start = 0;

        int end = arr.size() - 1;

 

        while (start < end) {

            int mid = start + (end - start) / 2;

 

            if (arr[mid] > arr[mid + 1]) {

                end = mid;

            } else {

                start = mid + 1;

            }

        }
============================================================================================================================
Search Insert Position:

https://www.codingninjas.com/studio/problems/algorithm-to-find-best-insert-position-in-sorted-array_839813

Solution:
int searchInsert(vector<int>& arr, int m)
{
    int low = 0;
    int high = arr.size()-1;
    int mid = low + (high-low)/2;
    int ans = arr.size();
    while(low<=high){
        if(arr[mid] >= m){
            ans = mid;
            high = mid-1;
        }
        else{
            low = mid+1;
        }
        mid = low + (high-low)/2;
    }
    return ans;
}

        return start;

}
============================================================================================================================
