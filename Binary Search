Binary Search:

https://www.codingninjas.com/studio/problems/binary-search_972

Solution:

int search(vector<int> &nums, int target) {
    int n = nums.size();
    int low = 0;
    int high = n-1;
    while(low<=high){
        int mid = (low+high)/2;
        if(nums[mid]==target){
            return mid;
        }
        else if(nums[mid]>target){
            high = mid-1;

        }
        else{
            low = mid+1;
        }
    }
    return -1;
}
============================================================================================================================
Find peak element:

https://www.codingninjas.com/studio/problems/find-peak-element_1081482


int findPeakElement(vector<int> &arr) {

    // Write your code here

     int start = 0;

        int end = arr.size() - 1;

 

        while (start < end) {

            int mid = start + (end - start) / 2;

 

            if (arr[mid] > arr[mid + 1]) {

                end = mid;

            } else {

                start = mid + 1;

            }

        }
============================================================================================================================
Search Insert Position:

https://www.codingninjas.com/studio/problems/algorithm-to-find-best-insert-position-in-sorted-array_839813

Solution:
int searchInsert(vector<int>& arr, int m)
{
    int low = 0;
    int high = arr.size()-1;
    int mid = low + (high-low)/2;
    int ans = arr.size();
    while(low<=high){
        if(arr[mid] >= m){
            ans = mid;
            high = mid-1;
        }
        else{
            low = mid+1;
        }
        mid = low + (high-low)/2;
    }
    return ans;
}

        return start;

}
============================================================================================================================
Single Element in a sorted Array:

https://www.codingninjas.com/studio/problems/unique-element-in-sorted-array_1112654

Solution:
#include<bits/stdc++.h>
int singleNonDuplicate(vector<int>& arr)
	  int n=arr.size();
    if(n==1){
        return arr[0];
    }
    if(arr[0]!=arr[1])
        return arr[0];
    }
    if (arr[n-1]!=arr[n-2]){
        return arr[n-1];
    }
    int start=1;
    int end=n-2;
    while(start<=end){
        int mid=(start+end)/2;
        if((arr[mid]!=arr[mid+1])&&(arr[mid]!=arr[mid-1])){
            return arr[mid];
        }
        else if((mid%2==1 && arr[mid-1]==arr[mid])||(mid%2==0 && arr[mid]==arr[mid+1])){
            start=mid+1;
        }
        else{
            end=mid-1;
        }
        mid=(start+end)/2;
    }
   return -1;
}

===========================================================================================================================
Find minimum in rotated sorted array:

https://www.codingninjas.com/studio/problems/rotated-array_1093219

Solution:
int findMin(vector<int>& arr)
{
	int s=0;
    int e=arr.size()-1;
    while(s<e){
        int mid=s+(e-s)/2;
        if(arr[mid]>arr[e]){
            s=mid+1;
        }
        else{
            e=mid;
        }
        mid=s+(e-s)/2;
    }
    return arr[s];
}
===========================================================================================================================
Rotation:

https://www.codingninjas.com/studio/problems/rotation_7449070

Solution:
#include<bits/stdc++.h>
int findKRotation(vector<int> &arr){
    int start=0,n=arr.size();
    int end=n-1;
    while(start<end)
    {
        int mid=start+(end-start)/2;
        if(arr[end]<arr[mid])
        start=mid+1;
        else 
        end=mid;
    }   
    return start%n;
}
===========================================================================================================================
Search in a rotated sorted array II:

https://www.codingninjas.com/studio/problems/search-in-a-rotated-sorted-array-ii_7449547

Solution:
bool searchInARotatedSortedArrayII(vector<int>nums, int target) {

    // Write your code here.

    int n=nums.size();

    int low=0;

    int high=n-1;

    

    while(low<=high){

        int mid=(low+high)/2;

        if(nums[mid]==target)return true;

        else if(nums[mid]==nums[low]&&nums[mid]==nums[high])

        {

            low++;

            high--;

        }

        else if(nums[low]<=nums[mid]){

            if(nums[low]<=target && target<=nums[mid])

            high=mid-1;

            else low=mid+1;

        }

        else{

            if(nums[mid]<=target&&target<=nums[high])

            low=mid+1;

            else high=mid-1;

        }

       

    }

     return false;

}

 
