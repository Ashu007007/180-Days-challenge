Selection Sort :

Without a function:

#include<bits/stdc++.h>
using namespace std;

int main(){
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;
    int arr[n];
    cout << "Enter the list of number to be sorted: " ;
    for(int i=0;i<n;i++){
         cin >> arr[i];
    }
    
    for(int i=0;i<n-1;i++){
        int min = i;                     // concidering that the ith element is the smallest.
        for(int j=i;j<=n-1;j++){
            if(arr[j]<arr[min]){
                min = j;
            }
        }
         int temp = arr[min];
            arr[min] = arr[i];
            arr[i] = temp;
    }
    
    for(int i=0;i<n;i++){              // To Display the sorted array 
        cout << arr[i] << " ";
    }
}


==================================================================================================================================
Selction sort using a function:

#include<bits/stdc++.h>

using namespace std;
void selection_sort(int arr[], int n) {
  // selection sort
  for (int i = 0; i < n - 1; i++) {
    int mini = i;
    for (int j = i + 1; j < n; j++) {
      if (arr[j] < arr[mini]) {
        mini = j;
      }
    }
    int temp = arr[mini];
    arr[mini] = arr[i];
    arr[i] = temp;
  }

  cout << "After selection sort: " << "\n";
  for (int i = 0; i < n; i++) {
    cout << arr[i] << " ";
  }
  cout << "\n";

}
int main() {
  int arr[] = {13,46,24,52,20,9};
  int n = sizeof(arr) / sizeof(arr[0]);
   cout << "Before selection sort: " << "\n";
   for (int i = 0; i < n; i++) {
    cout << arr[i] << " ";
  }
  cout << "\n";
  selection_sort(arr, n);
  return 0;
}


============================================================================================================================================================================
Bubble Sort:

https://www.codingninjas.com/studio/problems/bubble-sort_624380

Solution:

void bubbleSort(vector<int> &arr, int n){
    for(int i=n-1;i>=0;i--){
        for(int j = 0;j<=i-1;j++){
            if(arr[j]>arr[j+1]){
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}
===========================================================================================================================================================================
Insertion sort:

https://www.codingninjas.com/studio/problems/insertion-sort_624381

Solution: 

void insertionSort(int arr[], int n){
    for(int i=0;i<n;i++){
        int j =i;
        while(j>0 && arr[j-1]>arr[j]){
            int temp = arr[j-1];
            arr[j-1] = arr[j];
            arr[j] = temp;

            j--;
        }
    }
}

===========================================================================================================================================================================
Merge Sort:

https://www.codingninjas.com/studio/problems/merge-sort_5846

Soltuion:

#include<bits/stdc++.h>
using namespace std;
void merge(vector<int> &arr, int l, int mid, int r){
    int pt1 = l;
    int pt2 = mid+1;
    vector<int> ans;
    while(pt1<=mid && pt2<=r){
        if(arr[pt1]<arr[pt2]){
            ans.push_back(arr[pt1]);
            pt1++;
        }else{
            ans.push_back(arr[pt2]);
            pt2++;
        }
    }
    
    while(pt1<=mid){
        ans.push_back(arr[pt1]);
        pt1++;
    }
    while(pt2<=r){
        ans.push_back(arr[pt2]);
        pt2++;
    }
    for(int i=l; i<=r; i++){
    arr[i] = ans[i-l];
}
}

void mergeSort(vector<int> &arr, int l, int r){
    if(l==r) return;
    int mid = (l+r)/2;
    mergeSort(arr, l, mid);
    mergeSort(arr, mid+1, r);
    merge(arr, l, mid, r);
    
}
==========================================================================================================================================================================

Quick Sort:

https://www.codingninjas.com/studio/problems/quick-sort_5844

Soltion:

int partitionArray(int input[], int start, int end) {
	int pvt = input[start];
	int i = start;
	int j = end;
	while(i<j){
		while(input[i]<=pvt && i<=end-1){
			i++;
		}

		while(input[j]>pvt && j>=start+1){
			j--;
		}
		if(i<j){
			swap(input[i], input[j]);
		}
	}
	swap(input[start], input[j]);
	return j;
}

void quickSort(int input[], int start, int end) {
	if(start<end){
		int part = partitionArray(input, start, end);
		quickSort(input,start, part-1);
		quickSort(input,part+1,end);
	}
}

=========================================================================================================================
