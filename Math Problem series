Math Problem series with solution.


Question link
https://www.codingninjas.com/studio/problems/count-digits_8416387

Solution:

int countDigits(int n){
	int count = 0;
	int temp = n;
	while(temp != 0) {
		int last_dig = temp % 10;
		temp = temp / 10;
		if(last_dig > 0 && n % last_dig == 0)
			count = count + 1;
	}
	return count;
}

======================================================================================================================================================================

Question link
https://www.codingninjas.com/studio/problems/reverse-of-a-number_624652

Solution:

#include<iostream>
using namespace std;

int main() {
int n;
cin >> n;
int rev = 0;
int last_dig;
while(n > 0){
	last_dig = n % 10;
	rev = (rev * 10) + last_dig;
	n = n/10;
		
}
cout << rev;

}
==================================================================================================================================================================
Palindrome number:

https://www.codingninjas.com/studio/problems/palindrome-number_624662 

Solution:

bool palindrome(int n)
{
    int temp = n;
    int rev = 0;
    while(n > 0){
        int last_dig = n % 10;
        rev = (rev * 10) + last_dig;
        n = n/10;
    }
    if(temp == rev){
        return true;
    }else{
        return false;
    }
}

============================================================================================================================
Check Armstrong:
https://www.codingninjas.com/studio/problems/check-armstrong_589

Solution:

#include<math.h>
bool checkArmstrong(int n){
	int temp = n;
//example: log10(371) = (2.569) + 1 = since integer .569 is ignored so the lendgth can be determined as '3'.
	int len = (log10(n) + 1);
	int rev = 0;
	while(n > 0){
		int ld = n %10;
		rev = rev +pow(double (ld), double (len));
		n = n/10;
	}
	if(temp == rev){
		return true;
	}else{
		return false;
	}
}
======================================================================================================================================================
