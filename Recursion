Print N times using recursion:
https://www.codingninjas.com/studio/problems/-print-n-times_8380707

Solution:

vector<string> printNTimes(int n) {

    if(n==0)
    {
        return{};
    }
        vector<string>v = printNTimes(n-1);
        v.push_back("Coding Ninjas");
        return v;
}

===========================================================================================================================================================================
1 to N Without Loop:

https://www.codingninjas.com/studio/problems/print-1-to-n_628290

Solution:

vector<int> printNos(int x) {
    if(x==0){
        return{};
    }

    vector<int> v = printNos(x-1);
    v.push_back(x);
    return v;
}

==========================================================================================================================================================================
N to 1 without loop;

https://www.codingninjas.com/studio/problems/n-to-1-without-loop_8357243

Solution:

vector<int> printNos(int x) {
    static int n=x;
    // as static int cannot be changed.
    if(x==0){
      return {};
    }
        vector<int> v = printNos(x-1);
        v.emplace_back(n-x+1);
    
    return v;
    
}
======================================================================================================================================================================
 Reverse an Array:
https://www.codingninjas.com/studio/problems/reverse-an-array_8365444

Solution:

void ans(int s,int e, vector<int> &nums)

{

    if(s>e) return ;//base case //  stopping case

    swap(nums[s],nums[e]);//recursive function

    ans(s+1, e-1 ,nums);

}

vector<int> reverseArray(int n, vector<int> nums)

{

    int s =0;//start index

    int e =nums.size()-1;//end index

    ans(s,e,nums);

    return nums;

}

==========================================================================================================================
