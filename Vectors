Write a C++ program that returns the elements in a vector that are strictly smaller than their adjacent left and right neighbours.

Sample Data:
({1, 2 ,5, 0, 3, 1, 7}) -> 0, 1

CODE: using a function:

#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

vector<int> test(vector<int> nums)
{
	vector<int> temp;
	for(int i=1; i<nums.size()-1; i++) {
		if(nums[i]<nums[i-1] && nums[i]<nums[i+1]) temp.push_back(nums[i]);
	}
	return temp;
 }

int main(){
	//vector<int> nums = {7, 2 ,5, 3, 1, 5, 6};
	vector<int> nums = {1, 2 ,5, 0, 3, 1, 7};
    cout << "Original Vector elements:\n";
	for (int x : nums)
        cout << x << " ";
   vector<int> result = test(nums);
    cout << "\nVector elements that are smaller than its adjacent neighbors:\n";   
        for (int y : result)
        cout << y << "\n";
}


=====================================================================================================================
=====================================================================================================================

Same problem solution without a function:

#include <bits/stdc++.h>
using namespace std;

int main(){
vector <int> v1 = {1,2,5,0,3,1,7};
vector <int> v2;
for(int i=0; i<v1.size()-1;i++){
    if(v1[i]<v1[i-1] && v1[i]<v1[i+1]) v2.push_back(v1[i]);
}
for(vector<int>::iterator it =v2.begin(); it<v2.end(); it++){
    cout << *it << endl;
}
}


===========================================================================================================================
============================================================================================================================

